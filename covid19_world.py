# -*- coding: utf-8 -*-
"""covid19_world.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NguZlCcsnhmHmVKYLKAW2FTyEW2rUmym
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

df = pd.read_csv('/content/worldometer_data.csv')
df

df.info()

df.describe()

df.isnull().sum()
df.drop(["NewCases","NewDeaths","NewRecovered"],axis=1,inplace=True)

df["Continent"].mode()

df["TotalDeaths"].mean()

df["TotalRecovered"].mean()

df["ActiveCases"].mean()

df["Serious,Critical"].mean()

df["Tot Cases/1M pop"].mean()

df["Deaths/1M pop"].mean()

df["TotalTests"].mean()

df["Tests/1M pop"].mean()

df["WHO Region"].mode()

df["Population"].mean()

df["TotalTests"].mean()

df.fillna({"Continent":"Africa",
           "WHO Region":"Europe",
           "Tests/1M pop":1402404,
           "Deaths/1M pop":98,
           "Serious,Critical":534,
           "Tot Cases/1M pop":3196,
           "ActiveCases":27664,
           "TotalRecovered":58878,
           "TotalDeaths":3792,
           "TotalTests":1402404,
           "Population":30415486

           },inplace = True)

df.isnull().sum()

# from google.colab import files
# !pip install openpyx
# df.to_excel("output.xlsx", index=False)

# # Download the file
# files.download("output.xlsx")

df

# Top 5 countries with most total cases, deaths, recovered.

# Step 1: Force convert to string first, then remove commas, then convert to float
df["TotalCases"] = df["TotalCases"].astype(str).str.replace(",", "").astype(float)

d = df[["TotalCases","Country/Region"]].head(10).nlargest(10, "TotalCases")
d

import matplotlib.pyplot as plt
import matplotlib.ticker as ticker
colors = ['red', 'red', 'red','red','red','red','red','red','orange', 'green']
plt.bar(d["Country/Region"], d["TotalCases"],color=colors)
plt.title("Top 10 countries with most total cases",fontsize=16, color='black',fontweight="semibold")
plt.xlabel("Country",fontsize=12,color="blue")
plt.grid(axis='y', linestyle='--', alpha=0.7)

plt.xticks(rotation=20, fontsize=10,fontweight='semibold')
plt.ylabel("Total Cases",fontsize=12,color='blue')
plt.gca().yaxis.set_major_formatter(ticker.FuncFormatter(lambda x, p: format(int(x), ',')))
plt.show()

df

s  = df[["Country/Region","TotalDeaths"]].head(10).nlargest(10, "TotalDeaths")
colors=['red', 'red', 'red','red','red','red','red','red','orange', 'green']
plt.bar(s["Country/Region"],s["TotalDeaths"],color=colors)
plt.xlabel("Country",fontsize=12,color="black",fontweight="semibold")
plt.ylabel("Total Deaths",fontsize=12,color="black",fontweight="semibold")
plt.title("Top 10 countries with most total deaths",fontsize=16, color='black',fontweight="semibold")
plt.grid(axis='y', linestyle='--', alpha=1)
plt.xticks(rotation=20, fontsize=8,fontweight='semibold')
plt.show()

plt.figure(figsize=(6,5))
plt.scatter(df["TotalCases"], df["TotalDeaths"], color='red',label='Countries')
plt.xlabel("Total Cases", fontsize=12, color="black", fontweight='bold')
plt.ylabel("Total Deaths", fontsize=12, color="black", fontweight='bold')
plt.title("Total Cases vs Total Deaths", fontsize=16, color='black', fontweight="semibold")
plt.grid(axis='y', linestyle='--', alpha=1)
plt.gca().xaxis.set_major_formatter(ScalarFormatter(useOffset=False))
plt.ticklabel_format(style='plain', axis='x')
plt.tight_layout()
plt.show()

region_summary = (df.groupby("WHO Region")["TotalCases"].sum().sort_values(ascending=False))
plt.figure(figsize=(10, 6))
plt.bar(region_summary.index, region_summary.values, color='skyblue')
plt.xlabel("WHO Region", fontsize=12)
plt.ylabel("Total Cases", fontsize=12)
plt.title("Total COVID-19 Cases by WHO Region", fontsize=14)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.xticks(rotation=30, ha='right')
plt.show()

# Step 1: Keep only valid rows
df = df[(df["TotalCases"] > 0) & (df["TotalDeaths"] <= df["TotalCases"])]

# Step 2: Calculate death rate
df["deaths_rate"] = round((df["TotalDeaths"] / df["TotalCases"]) * 100, 2)

# Step 3: Check again
print("Max Death Rate:", df["deaths_rate"].max())
df = df[df["TotalCases"] > 1000]
print("Max Death Rate:", df["deaths_rate"].max())

df['deaths_rate'] = round((df["TotalDeaths"] / df["TotalCases"]) * 100, 2)
deaths_rate_Country = df[["deaths_rate", 'Country/Region']].nlargest(10, "deaths_rate")
deaths_rate_Country


plt.figure(figsize=(6,5))
plt.bar(deaths_rate_Country["Country/Region"], deaths_rate_Country["deaths_rate"], color='tomato')
plt.xticks(rotation=45)
plt.xlabel("Country")
plt.ylabel("Death Rate (%)")
plt.title("Top 10 Countries by COVID-19 Death Rate")
plt.tight_layout()
plt.show()

df['deaths_rate'] = round((df["TotalDeaths"] / df["TotalCases"]) * 100, 2)
deaths_rate_Country = df[["deaths_rate", 'Country/Region']].nsmallest(10, "deaths_rate")
deaths_rate_Country


plt.figure(figsize=(6,5))
plt.bar(deaths_rate_Country["Country/Region"], deaths_rate_Country["deaths_rate"], color='green')
plt.xticks(rotation=45)
plt.xlabel("Country")
plt.ylabel("Death Rate (%)")
plt.title("Top 10 lowest Countries by COVID-19 Death Rate")
plt.tight_layout()
plt.show()

df["TotalCases"] = df["TotalCases"].astype(str).str.replace(",", "").replace('nan', '0').astype(float)

top5 = df.sort_values("TotalCases", ascending=False).head(5)

others_total = df["TotalCases"].sum() - top5["TotalCases"].sum()

top5 = top5[["Country/Region", "TotalCases"]]
top5.loc[len(top5)] = ["Others", others_total]

plt.figure(figsize=(10,6))
colors= ["red","blue","green","yellow","purple",'cyan']
plt.pie(top5["TotalCases"], labels=top5["Country/Region"], autopct='%1.1f%%', startangle=90, colors=colors)
plt.title("Share of Top 5 Countries in Total COVID Cases", fontsize=14)
plt.tight_layout()
plt.show()

